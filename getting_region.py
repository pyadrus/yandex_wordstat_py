# -*- coding: utf-8 -*-
import os
import requests
from dotenv import load_dotenv
from loguru import logger

load_dotenv(dotenv_path='.env')

OAuth = os.getenv('OAuth')

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ URL
URL_REGIONS = "https://api.wordstat.yandex.net/v1/regions"  # –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
URL_REGIONS_TREE = "https://api.wordstat.yandex.net/v1/getRegionsTree"  # –î–ª—è —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
HEADERS = {
    "Authorization": f"Bearer {OAuth}",
    "Content-Type": "application/json",
}


def get_regions_tree():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ (ID -> –Ω–∞–∑–≤–∞–Ω–∏–µ)
    """
    try:
        response = requests.post(URL_REGIONS_TREE, headers=HEADERS)
        response.raise_for_status()
        print("RAW response:", response.text)
        tree = response.json()

        if not tree:
            logger.error("‚ùå –û—Ç–≤–µ—Ç –æ—Ç /v1/getRegionsTree –ø—É—Å—Ç–æ–π")
            return {}

        region_map = {}
        _parse_region_tree(tree, region_map)
        logger.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(region_map)} —Ä–µ–≥–∏–æ–Ω–æ–≤")
        return region_map

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ä–µ–≤–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤: {e}")
        return {}


def _parse_region_tree(node, region_map):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –¥–µ—Ä–µ–≤–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ (value -> label)
    """
    if isinstance(node, dict):
        if "value" in node and "label" in node:
            region_map[int(node["value"])] = node["label"]  # ID –ø—Ä–∏–≤–æ–¥–∏–º –∫ int
        if "children" in node and node["children"]:
            for child in node["children"]:
                _parse_region_tree(child, region_map)
    elif isinstance(node, list):
        for item in node:
            _parse_region_tree(item, region_map)


def get_wordstat_by_regions(keyword: str, region_type: str = "cities"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –¥–ª—è –∫–ª—é—á–µ–≤–æ–π —Ñ—Ä–∞–∑—ã
    """
    payload = {
        "phrase": keyword,
        "regionType": region_type,  # all, cities, regions, countries
    }

    try:
        response = requests.post(URL_REGIONS, json=payload, headers=HEADERS, timeout=10)
        if response.status_code == 200:
            return response.json()
        else:
            logger.error(f"‚ùå {response.status_code}: {response.text}")
            return None
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None


def pretty_regions(keyword: str, data: dict, region_names: dict) -> str:
    if not data or 'regions' not in data:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö"

    result = [f"üìä –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è: '{keyword}'"]
    result.append("\nüìç –¢–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤):")

    sorted_regions = sorted(data['regions'], key=lambda x: x['count'], reverse=True)

    for region in sorted_regions[:10]:
        region_id = region['regionId']
        name = region_names.get(region_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω")
        count = f"{region['count']:,}".replace(",", " ")
        share = region['share'] * 100
        affinity = region['affinityIndex']
        result.append(
            f"   ‚Ä¢ {name} (ID: {region_id}) ‚Äî {count} –∑–∞–ø—Ä–æ—Å–æ–≤ "
            f"(–¥–æ–ª—è: {share:.2f}%, –∏–Ω–¥–µ–∫—Å: {affinity:.1f})"
        )

    return "\n".join(result)


def main():
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤
    region_names = get_regions_tree()

    # –ó–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    keyword = "–∫—É—Ä—Å—ã"
    data = get_wordstat_by_regions(keyword, "cities")

    if data:
        print(pretty_regions(keyword, data, region_names))
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")


if __name__ == "__main__":
    main()
