def pretty_regions(keyword: str, data: dict, region_names: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ.

    Args:
        keyword (str): –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.
        data (dict): –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö –∏–∑ API Wordstat.
                     –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∏–¥–∞:
                     {
                         "regions": [
                             {
                                 "regionId": int,       # ID —Ä–µ–≥–∏–æ–Ω–∞
                                 "count": int,          # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
                                 "share": float,        # –î–æ–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ä–µ–≥–∏–æ–Ω–µ
                                 "affinityIndex": float # –ò–Ω–¥–µ–∫—Å –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–∞—Ñ—Ñ–∏–Ω–∏—Ç–∏–≤–Ω–æ—Å—Ç–∏)
                             },
                             ...
                         ]
                     }
        region_names (dict): –°–ª–æ–≤–∞—Ä—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è {region_id: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞"}.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ —Ç–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–∞–º.
             –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö".

    Example:
        >>> pretty_regions("–∫—É–ø–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", data, {213: "–ú–æ—Å–∫–≤–∞", 1: "–†–æ—Å—Å–∏—è"})
        "üìä –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è: '–∫—É–ø–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'\n
         üìç –¢–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤):\n
            ‚Ä¢ –ú–æ—Å–∫–≤–∞ (ID: 213) ‚Äî 15 320 –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–æ–ª—è: 12.35%, –∏–Ω–¥–µ–∫—Å: 1.2)"
    """

    # –ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if not data or 'regions' not in data:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö"

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞
    result = [f"üìä –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è: '{keyword}'"]
    result.append("\nüìç –¢–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤):")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    sorted_regions = sorted(data['regions'], key=lambda x: x['count'], reverse=True)

    # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–æ–≤
    for region in sorted_regions[:10]:
        region_id = region['regionId']
        name = region_names.get(region_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω")  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ ID
        count = f"{region['count']:,}".replace(",", " ")  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        share = region['share'] * 100  # –ü–µ—Ä–µ–≤–æ–¥ –¥–æ–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        affinity = region['affinityIndex']  # –ò–Ω–¥–µ–∫—Å –∞—Ñ—Ñ–∏–Ω–∏—Ç–∏–≤–Ω–æ—Å—Ç–∏

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —Ä–µ–≥–∏–æ–Ω—É
        result.append(
            f"   ‚Ä¢ {name} (ID: {region_id}) ‚Äî {count} –∑–∞–ø—Ä–æ—Å–æ–≤ "
            f"(–¥–æ–ª—è: {share:.2f}%, –∏–Ω–¥–µ–∫—Å: {affinity:.1f})"
        )

    # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    return "\n".join(result)
