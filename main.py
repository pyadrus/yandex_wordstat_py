# -*- coding: utf-8 -*-
import time

from loguru import logger

from getting_region import get_regions_tree
from keys import OAuth
from regions import get_wordstat_by_regions


def pretty_wordstat(data: dict) -> str:
    lines = []
    lines.append(f"üìä –ó–∞–ø—Ä–æ—Å: {data['requestPhrase']}")
    lines.append(f"üî¢ –û–±—â–∞—è —á–∞—Å—Ç–æ—Ç–∞: {data['totalCount']:,}".replace(",", " "))
    lines.append("\n‚ú® –¢–æ–ø –∑–∞–ø—Ä–æ—Å—ã:")
    for item in data.get("topRequests", []):
        lines.append(f"   ‚Ä¢ {item['phrase']} ‚Äî {item['count']:,}".replace(",", " "))
    lines.append("\nüîó –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏:")
    for item in data.get("associations", []):
        lines.append(f"   ‚Ä¢ {item['phrase']} ‚Äî {item['count']:,}".replace(",", " "))
    return "\n".join(lines)


def pretty_regions(keyword: str, data: dict, region_names: dict) -> str:
    if not data or 'regions' not in data:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö"
    result = [f"üìä –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è: '{keyword}'"]
    result.append("\nüìç –¢–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤):")
    sorted_regions = sorted(data['regions'], key=lambda x: x['count'], reverse=True)
    for region in sorted_regions[:10]:
        region_id = region['regionId']
        name = region_names.get(region_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω")
        count = f"{region['count']:,}".replace(",", " ")
        share = region['share'] * 100
        affinity = region['affinityIndex']
        result.append(
            f"   ‚Ä¢ {name} (ID: {region_id}) ‚Äî {count} –∑–∞–ø—Ä–æ—Å–æ–≤ "
            f"(–¥–æ–ª—è: {share:.2f}%, –∏–Ω–¥–µ–∫—Å: {affinity:.1f})"
        )
    return "\n".join(result)


def main():
    region_names = get_regions_tree(OAuth=OAuth)
    keywords = ["–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–æ–±—É—á–µ–Ω–∏–µ", "–∫—É—Ä—Å—ã"]
    for keyword in keywords:
        logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}")
        data = get_wordstat_by_regions(keyword, OAuth, "cities")
        if data:
            print(pretty_regions(keyword, data, region_names))
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è '{keyword}'")
        time.sleep(1)  # —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã


if __name__ == "__main__":
    main()
