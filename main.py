# -*- coding: utf-8 -*-
import os
import time

import requests
from dotenv import load_dotenv
from loguru import logger

load_dotenv(dotenv_path='.env')

OAuth = os.getenv('OAuth')


def create_wordstat_report(keyword: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –∏–∑ Wordstat API (v1)
    """
    url = "https://api.wordstat.yandex.net/v1/topRequests"
    headers = {
        "Authorization": f"Bearer {OAuth}",
        "Content-Type": "application/json",
    }

    payload = {
        "phrase": keyword,
        "numPhrases": 20,  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50, –º–∞–∫—Å–∏–º—É–º 2000
        "devices": ["all"],  # –º–æ–∂–Ω–æ: all, desktop, phone, tablet
    }

    response = requests.post(url, json=payload, headers=headers)

    if response.status_code == 200:
        data = response.json()
        logger.debug("üìä –û—Ç–≤–µ—Ç Wordstat:", data)
        return data
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Wordstat {response.status_code}: {response.text}")
        return None





def pretty_wordstat(data: dict) -> str:
    lines = []
    lines.append(f"üìä –ó–∞–ø—Ä–æ—Å: {data['requestPhrase']}")
    lines.append(f"üî¢ –û–±—â–∞—è —á–∞—Å—Ç–æ—Ç–∞: {data['totalCount']:,}".replace(",", " "))

    lines.append("\n‚ú® –¢–æ–ø –∑–∞–ø—Ä–æ—Å—ã:")
    for item in data.get("topRequests", []):
        lines.append(f"   ‚Ä¢ {item['phrase']} ‚Äî {item['count']:,}".replace(",", " "))

    lines.append("\nüîó –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏:")
    for item in data.get("associations", []):
        lines.append(f"   ‚Ä¢ {item['phrase']} ‚Äî {item['count']:,}".replace(",", " "))

    return "\n".join(lines)


def pretty_regions(data: dict) -> str:
    if not data or 'regions' not in data:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö"

    result = [f"üìä –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è: {data['requestPhrase']}"]
    result.append(f"üî¢ –í—Å–µ–≥–æ –ø–æ–∫–∞–∑–æ–≤: {data.get('totalCount', 0):,}")
    result.append("\nüìç –¢–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤:")

    for region in data.get('regions', [])[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–≥–∏–æ–Ω–∞–º–∏
        result.append(f"   ‚Ä¢ {region['regionId']} ‚Äî {region['count']:,}")

    return "\n".join(result)


def main():
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    keywords = ["–º–∞—Ä–∫–µ—Ç–∏–Ω–≥"]

    for keyword in keywords:
        logger.info(f"–ó–∞–ø—Ä–æ—Å: {keyword}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (–≥–æ—Ä–æ–¥–∞)
        region_data = get_wordstat_by_regions(keyword, "cities")
        print(region_data)
        if region_data:
            print(pretty_regions(region_data))

        time.sleep(1)

if __name__ == "__main__":
    main()