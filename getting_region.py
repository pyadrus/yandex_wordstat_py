# -*- coding: utf-8 -*-
from loguru import logger

from get_regions_tree import get_regions_tree
from keys import OAuth
from regions import get_wordstat_by_regions


def _parse_region_tree(node, region_map):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –¥–µ—Ä–µ–≤–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ (value -> label)
    """
    if isinstance(node, dict):
        if "value" in node and "label" in node:
            region_map[int(node["value"])] = node["label"]  # ID –ø—Ä–∏–≤–æ–¥–∏–º –∫ int
        if "children" in node and node["children"]:
            for child in node["children"]:
                _parse_region_tree(child, region_map)
    elif isinstance(node, list):
        for item in node:
            _parse_region_tree(item, region_map)


def pretty_regions(keyword: str, data: dict, region_names: dict) -> str:
    if not data or 'regions' not in data:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö"
    result = [f"üìä –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è: '{keyword}'"]
    result.append("\nüìç –¢–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤):")
    sorted_regions = sorted(data['regions'], key=lambda x: x['count'], reverse=True)
    for region in sorted_regions[:10]:
        region_id = region['regionId']
        name = region_names.get(region_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω")
        count = f"{region['count']:,}".replace(",", " ")
        share = region['share'] * 100
        affinity = region['affinityIndex']
        result.append(
            f"   ‚Ä¢ {name} (ID: {region_id}) ‚Äî {count} –∑–∞–ø—Ä–æ—Å–æ–≤ "
            f"(–¥–æ–ª—è: {share:.2f}%, –∏–Ω–¥–µ–∫—Å: {affinity:.1f})"
        )
    return "\n".join(result)


def main():
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤
    region_names = get_regions_tree(OAuth=OAuth)
    # –ó–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    keyword = "–∫—É—Ä—Å—ã"
    data = get_wordstat_by_regions(keyword, OAuth, "cities")
    if data:
        print(pretty_regions(keyword, data, region_names))
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")


if __name__ == "__main__":
    main()
